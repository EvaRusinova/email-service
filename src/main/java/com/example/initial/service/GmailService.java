package com.example.initial.service;

import com.example.initial.entity.User;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.model.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.Session;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Base64;
import java.util.Properties;

@Component
@RequiredArgsConstructor
public class GmailService {

    private static final String CLIENT_ID = "643338738759-hjscqhef1b4931ev3iqmp3t6nikg90ut.apps.googleusercontent.com";
    private static final String CLIENT_SECRET = "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";
    private static final String REFRESH_TOKEN = "1//04mLNpfwSj_o0CgYIARAAGAQSNwF-L9Ir-0myi51fQ1KopZBfv075jOeSeMLSONlQPkXOo--BXx8xoDgU4qC2RFeb2ys9xFCwhxo";
    private final TemplateEngine templateEngine;

    public GmailService() {
        ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();
        templateResolver.setSuffix(".html");
        templateResolver.setTemplateMode("HTML");
        templateResolver.setCacheable(false);
        this.templateEngine = new TemplateEngine();
        this.templateEngine.setTemplateResolver(templateResolver);
    }

    private Gmail buildGmailService() throws GeneralSecurityException, IOException {
        Credential credential = new GoogleCredential.Builder()
                .setTransport(GoogleNetHttpTransport.newTrustedTransport())
                .setJsonFactory(JacksonFactory.getDefaultInstance())
                .setClientSecrets(CLIENT_ID, CLIENT_SECRET)
                .build()
                .setRefreshToken(REFRESH_TOKEN);

        return new Gmail.Builder(
                GoogleNetHttpTransport.newTrustedTransport(),
                JacksonFactory.getDefaultInstance(),
                credential)
                .setApplicationName("email-service")
                .build();
    }

    public void sendEmail(User user) throws MessagingException, IOException, GeneralSecurityException {
        Session session = Session.getDefaultInstance(new Properties(), null);

        MimeMessage emailMessage = new MimeMessage(session);
        emailMessage.setFrom(new InternetAddress("user.service.autogenerated@gmail.com"));
        emailMessage.addRecipient(jakarta.mail.Message.RecipientType.TO, new InternetAddress(user.getEmail()));
        emailMessage.setSubject(user.getSubject());

        Context context = new Context();
        context.setVariable("userName", user.getUserName());
        String bodyHtml = templateEngine.process("template/emailMessage-template", context);

        emailMessage.setContent(bodyHtml, "text/html");

        Message message = createMessageWithEmail(emailMessage);
        sendMessage(buildGmailService(), "me", message);
    }

    private Message createMessageWithEmail(MimeMessage email) throws MessagingException, IOException {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        email.writeTo(bytes);
        String encodedEmail = Base64.getEncoder().encodeToString(bytes.toByteArray());
        Message message = new Message();
        message.setRaw(encodedEmail);
        return message;
    }

    private void sendMessage(Gmail service, String userId, Message email) throws IOException {
        service.users().messages().send(userId, email).execute();
    }
}