name: Build and Tag Docker Image

on:
  push:
    branches:
      - dev
      - main

env:
  IMAGE_TAG: latest
  IMAGE_NAME: email-service
  PORT: 8082

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository so that the workflow can access your project files.
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Java 17 in the GitHub Actions runner environment using the AdoptOpenJDK distribution.
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      # Grant execute permissions to the Gradle wrapper script (gradlew) so that it can be executed in the next step.
      - name: Set execute permissions for gradlew
        run: chmod +x gradlew

      # Run the "build" task using the Gradle wrapper to build and test your project.
      - name: Build and Test
        run: ./gradlew build

      # This step builds a Docker image with the specified name and tag based on the current directory (where the Dockerfile is located).
      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      # Run the Docker image as a detached container, exposing and mapping the ports.
      - name: Run Docker Image
        run: docker run -d -p ${{ env.PORT }}:${{ env.PORT }} ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # Download and run ngrok to create a temporary tunnel for the Docker image's port.
      - name: Expose Docker Image using ngrok
        run: |
          wget -q https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
          unzip -qq ngrok-stable-linux-amd64.zip
          ./ngrok http ${{ env.PORT }} > ngrok_output.txt &
        # The ngrok command will generate a forwarding URL that you can use to access the Docker image.

      # Wait for ngrok to initialize and display the forwarding URL.
      - name: Wait for ngrok
        run: sleep 10
        # Adjust the sleep time as needed. Waiting for a few seconds should be enough for ngrok to initialize.

      # Extract the ngrok forwarding URL from the ngrok command output and set it as an environment variable.
      - name: Extract ngrok URL
        id: extract_ngrok_url
        run: |
          echo "NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')" >> $GITHUB_ENV
        # Use the GITHUB_ENV file to set the NGROK_URL environment variable.

      # Use the ngrok URL to access the Swagger page or web service.
      - name: Access Swagger Page
        run: |
          echo "Swagger Page URL: $NGROK_URL"
        # Use the 'NGROK_URL' environment variable to access the Swagger page or web service.